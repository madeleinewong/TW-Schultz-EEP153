{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preface\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, if you don&rsquo;t already have the latest version of the `cfe` package\n",
    "installed, grab it, along with some dependencies:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already up-to-date: CFEDemands in /srv/app/venv/lib/python3.6/site-packages\n",
      "\u001b[33mYou are using pip version 9.0.3, however version 20.1 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n",
      "Requirement already up-to-date: xarray in /srv/app/venv/lib/python3.6/site-packages\n",
      "Requirement already up-to-date: setuptools>=41.2 in /srv/app/venv/lib/python3.6/site-packages (from xarray)\n",
      "Requirement already up-to-date: pandas>=0.25 in /srv/app/venv/lib/python3.6/site-packages (from xarray)\n",
      "Requirement already up-to-date: numpy>=1.15 in /srv/app/venv/lib/python3.6/site-packages (from xarray)\n",
      "Requirement already up-to-date: pytz>=2017.2 in /srv/app/venv/lib/python3.6/site-packages (from pandas>=0.25->xarray)\n",
      "Requirement already up-to-date: python-dateutil>=2.6.1 in /srv/app/venv/lib/python3.6/site-packages (from pandas>=0.25->xarray)\n",
      "Requirement already up-to-date: six>=1.5 in /srv/app/venv/lib/python3.6/site-packages (from python-dateutil>=2.6.1->pandas>=0.25->xarray)\n",
      "\u001b[33mYou are using pip version 9.0.3, however version 20.1 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n",
      "Requirement already satisfied: h5netcdf in /srv/app/venv/lib/python3.6/site-packages\n",
      "Requirement already satisfied: h5py in /srv/app/venv/lib/python3.6/site-packages (from h5netcdf)\n",
      "Requirement already satisfied: numpy>=1.7 in /srv/app/venv/lib/python3.6/site-packages (from h5py->h5netcdf)\n",
      "Requirement already satisfied: six in /srv/app/venv/lib/python3.6/site-packages (from h5py->h5netcdf)\n",
      "\u001b[33mYou are using pip version 9.0.3, however version 20.1 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "!pip install CFEDemands --upgrade --pre\n",
    "!pip install xarray --upgrade\n",
    "!pip install h5netcdf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Second, load relevant dataset:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method Dataset.head of <xarray.Result>\n",
       "Dimensions:           (i: 124, j: 8522, k: 14, kp: 14, m: 1, t: 4, u: 21)\n",
       "Coordinates:\n",
       "  * i                 (i) object '(Cocoyam, Spinach, etc)' ... 'Yam-roots'\n",
       "  * k                 (k) object 'M 0-3' 'M 4-8' 'M 9-13' ... 'F 31-50' 'F 51+'\n",
       "  * t                 (t) int64 2010 2012 2015 2018\n",
       "  * m                 (m) int64 1\n",
       "  * u                 (u) object '1. KILOGRAMS (KG)' ... 'litre (l)'\n",
       "  * j                 (j) object '100001' '100002' '100003' ... '99096' '99098'\n",
       "  * kp                (kp) object 'F 0-3' 'F 14-18' ... 'M 51+' 'M 9-13'\n",
       "Data variables:\n",
       "    alpha             (i) float64 4.138 4.828 nan nan ... 5.031 nan nan 5.717\n",
       "    beta              (i) float64 0.2647 0.4927 nan nan ... 0.3716 nan nan 0.31\n",
       "    delta             (k, i) float64 -0.01694 0.03455 nan ... nan nan 0.08949\n",
       "    prices            (t, m, i, u) float64 nan nan nan nan ... nan nan nan nan\n",
       "    characteristics   (k, j, t, m) float64 0.0 0.0 0.0 nan ... nan nan nan 1.0\n",
       "    loglambdas        (j, t, m) float64 nan nan 0.3517 nan ... nan nan 0.9968\n",
       "    a                 (i, t, m) float64 4.138 3.889 4.577 ... 5.818 5.998 6.288\n",
       "    yhat              (j, t, m, i) float64 nan nan nan nan ... nan nan 6.166\n",
       "    ce                object None\n",
       "    cehat             object None\n",
       "    e                 (i, j, m, t) float64 nan nan nan nan ... nan nan nan nan\n",
       "    delta_covariance  (i, k, kp) float64 0.0001232 -1.128e-05 ... -3.808e-06\n",
       "    se_delta          (i, k) float64 0.03884 0.03059 0.02982 ... 0.02162 0.02591\n",
       "    se_beta           float64 nan\n",
       "    se_alpha          (i) float64 0.05958 0.046 0.0 0.0 ... 0.0 0.0 0.02184\n",
       "    se_a              (i, t, m) float64 0.05958 0.05604 ... 0.02325 0.0213\n",
       "    y                 object None\n",
       "    logp              (t, m, i, u) float64 nan nan nan nan ... nan nan nan nan\n",
       "    z                 (k, j, t, m) float64 0.0 0.0 0.0 nan ... nan nan nan 1.0\n",
       "Attributes:\n",
       "    firstround:            2010\n",
       "    min_proportion_items:  0.125\n",
       "    min_xproducts:         30\n",
       "    useless_expenditures:  None\n",
       "    stderr_tol:            0.01\n",
       "    indices:               Indices(j='j', t='t', m='m', i='i', k='k')\n",
       "    verbose:               False>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import cfe\n",
    "\n",
    "# Results can be made persistent by saving them, and then re-loading...\n",
    "r = cfe.from_dataset('./Nigeria_small.ds')\n",
    "\n",
    "r['alpha'] = r.alpha.loc[r.alpha>0]  # Insist on alpha positive\n",
    "\n",
    "r.head"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Choosing reference prices, budget, and units\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We&rsquo;ll want to choose reference prices (a choice of `t` and `m`) and\n",
    "units (`u`).  You can examine possibilities by looking at:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Coordinates:\n",
       "  * i        (i) object '(Cocoyam, Spinach, etc)' ... 'Yam-roots'\n",
       "  * t        (t) int64 2010 2012 2015 2018\n",
       "  * m        (m) int64 1\n",
       "  * u        (u) object '1. KILOGRAMS (KG)' '2. GRAMS (G)' ... 'litre (l)'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r.prices.coords"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below we choose first market in first period, but this is a matter of\n",
    "choice.  We also choose prices for goods measured in &rsquo;Kilograms&rsquo;; this\n",
    "may vary with the dataset.  To inspect possible units look at:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/srv/app/venv/lib/python3.6/site-packages/xarray/core/nanops.py:142: RuntimeWarning: Mean of empty slice\n",
      "  return np.nanmean(a, axis=axis, dtype=dtype)\n",
      "/srv/app/venv/lib/python3.6/site-packages/xarray/core/nputils.py:215: RuntimeWarning: Degrees of freedom <= 0 for slice.\n",
      "  result = getattr(npmodule, name)(values, axis=axis, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "i\n",
       "(Cocoyam, Spinach, etc)     68.315621\n",
       "Agricultural eggs          202.653897\n",
       "Avocado pear                72.225457\n",
       "Baby milk powder           231.375755\n",
       "Bananas                     90.821855\n",
       "                              ...    \n",
       "Wheat flour                 98.954978\n",
       "White beans                101.311511\n",
       "Wild game meat             426.200899\n",
       "Yam flour                  225.491453\n",
       "Yam-roots                   61.296256\n",
       "Name: prices, Length: 90, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t = r.firstround  # First round\n",
    "m = r.coords['m'][0] # First market\n",
    "\n",
    "# Get median budget\n",
    "x = r.get_predicted_expenditures().sum('i')\n",
    "medianx = x.where(x>0).sel(t=t,m=m).median('j').values\n",
    "\n",
    "# Note selection of prices for first market in first period for /kgs/.\n",
    "# For goods never measured in kgs prices will be missing. \n",
    "p = r.prices.sel(t=t,m=m,u='Kilograms',drop=True).to_dataframe().squeeze().dropna()\n",
    "p"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And with $(x,p)$ defined we can calculate example demands:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "i\n",
       "(Cocoyam, Spinach, etc)                   0.366933\n",
       "Agricultural eggs                         2.789957\n",
       "Bananas                                   0.788088\n",
       "Beef                                      0.186890\n",
       "Beer (local and imported)                 2.426062\n",
       "Bread                                     0.660163\n",
       "Brown beans                               0.508576\n",
       "Chicken                                   0.104248\n",
       "Chocolate drinks                          1.989477\n",
       "Cocoyam                                   0.367896\n",
       "Condiments,(salt,spices,pepper, etc)     43.886105\n",
       "Fish-Dried                                0.959619\n",
       "Fish-Fresh                                0.844145\n",
       "Fish-Frozen                               0.076023\n",
       "Fish-Smoked                             153.587912\n",
       "Garden eggs/egg plant                     0.323181\n",
       "Gari -Yellow                              0.413920\n",
       "Gari-White                                1.151248\n",
       "Goat                                      0.147698\n",
       "Groundnut oil                             0.442504\n",
       "Malt drinks                               0.776985\n",
       "Milk powder                               9.969153\n",
       "Milk tinned (unsweetened)                 0.319247\n",
       "Okra-fresh                                0.232426\n",
       "Onions                                   27.473640\n",
       "Orange/tangerine                          0.716055\n",
       "Other vegetables (fresh or canned)        0.159386\n",
       "Palm oil                                  2.446406\n",
       "Pineapples                                0.273621\n",
       "Plantains                                 0.467093\n",
       "Rice-Imported                             9.409886\n",
       "Rice-local                               17.129885\n",
       "Sachet water                             15.406671\n",
       "Seafood (lobster, crab, prawns)           3.923543\n",
       "Soft drinks (Coca cola, spirit etc)       0.907281\n",
       "Sugar                                   646.838536\n",
       "Sweet Potatoes                            0.730861\n",
       "Tea                                       0.275031\n",
       "Tomato puree(canned)                      1.012691\n",
       "Tomatoes                                  4.168261\n",
       "White beans                               1.267288\n",
       "Yam-roots                                 1.158640\n",
       "dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Expenditures divided by reference prices per Kilogram\n",
    "c=(r.demands(medianx)/p).dropna()\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Protein', 'Fat', 'fibre', 'carbohydrate', 'Calories', 'energy_kj',\n",
       "       'Calcium', 'Iron', 'Betacarotene', 'caroten_total', 'Thiamine',\n",
       "       'Riboflavin', 'Niacin', 'Ascorbic Acid', 'pu_cal', 'pu_prot', 'pu_fat'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# The function below adapted from Gianmario Spacagna's suggestion at\n",
    "# https://stackoverflow.com/questions/19611729/getting-google-spreadsheet-csv-into-a-pandas-dataframe\n",
    "def dataframe_from_gspreadsheet(sheet_name, key):\n",
    "    \"\"\"Transform public google spreadsheet into pandas.DataFrame.\"\"\"\n",
    "    \n",
    "    url = 'https://docs.google.com/spreadsheets/d/{key}/gviz/tq?tqx=out:csv&sheet={sheet_name}&headers=1'.format(\n",
    "        key=key, sheet_name=sheet_name.replace(' ', '%20'))\n",
    "\n",
    "    df = pd.read_csv(url)\n",
    "\n",
    "    return df.drop([col for col in df.columns if col.startswith('Unnamed')], axis=1)\n",
    "\n",
    "# Change 'ICRISAT' sheet id to that of your own sheet\n",
    "fct = dataframe_from_gspreadsheet(\"FCT\", '13Ig5hZif-NSHtgkKRp_cEgKXk0lOsdUB2BAD6O_FnRo')\n",
    "\n",
    "\n",
    "# Change some labels\n",
    "d={'protein':'Protein',\n",
    "   'protein g':'Protein',\n",
    "   'fat':'Fat',\n",
    "   'energy_kcal':'Calories',\n",
    "   'energy kcal':'Calories',\n",
    "   'calcium':'Calcium',\n",
    "   'ca mg':'Calcium',\n",
    "   'betacarotene':'Betacarotene',\n",
    "   'thiamine':'Thiamine',\n",
    "   'riboflavin':'Riboflavin',\n",
    "   'niacin':'Niacin',\n",
    "   'iron':'Iron',\n",
    "   'fe mg':'Iron',\n",
    "   'ascorbic_total':'Ascorbic Acid',\n",
    "   'vit a ug':'Vitamin A',\n",
    "   'vit b6 mg':'Vitamin B6',\n",
    "   'vit b12 ug':'Vitamin B12',\n",
    "   'vit d ug':'Vitamin D',\n",
    "   'vit e ug':'Vitamin E',\n",
    "   'vit c mg':'Vitamin C',\n",
    "   'mg mg':'Magnesium',\n",
    "   'zn mg':'Zinc'}\n",
    "\n",
    "fct = fct.rename(columns=d) #[list(d.values())]\n",
    "\n",
    "# Fix capitalization (to match food labels)\n",
    "fct.index = fct.reset_index()['i'].str.title()\n",
    "del fct['i']\n",
    "del fct['ext_source']\n",
    "\n",
    "# Replace missing with zeros\n",
    "fct = fct.fillna(0)\n",
    "\n",
    "try:\n",
    "    fct.index = fct.index.droplevel('u')\n",
    "except (AttributeError,KeyError):\n",
    "    pass # No units?\n",
    "\n",
    "fct.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Mapping to Nutrients\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We&rsquo;ve seen how to map prices and budgets into vectors of consumption\n",
    "quantities using `cfe.Result.demands`.  Next we want to think about\n",
    "how to map these into bundles of *nutrients*.  The information needed\n",
    "for the mapping comes from a &ldquo;Food Conversion Table&rdquo; (or database,\n",
    "such as the [USDA Food Central Database](https://fdc.nal.usda.gov/)).   Here we&rsquo;ve adapted (with\n",
    "thanks to Alessandro Tarozzi of the Universitat Pompeu Fabra) a food\n",
    "conversion table developed by Gopalan et al (1980) to the foods\n",
    "reported in the Indian ICRISAT data:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already up-to-date: pip in /srv/app/venv/lib/python3.6/site-packages (20.0.2)\n",
      "Requirement already up-to-date: CFEDemands in /srv/app/venv/lib/python3.6/site-packages (0.2.7.dev0)\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade pip\n",
    "!pip install CFEDemands --upgrade --pre\n",
    "import datascience as ds\n",
    "import numpy as np\n",
    "import plotly.offline as py\n",
    "import plotly.graph_objs as go\n",
    "import pandas as pd\n",
    "import cfe\n",
    "from ipywidgets import interact, interactive, Dropdown, IntSlider\n",
    "import ipywidgets as widgets\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import matplotlib.cm as cm\n",
    "#import wbdata as wb\n",
    "\n",
    "#!pip install CFEDemands --pre\n",
    "\n",
    "HH_and_Expenditure_Sheet = {'P3 HH/E Characteristics':'1RpMK9oo6knSG_eJMTdUJltq937WlIqAK0IE5inTLvfQ',\n",
    "        }\n",
    "Sheets = HH_and_Expenditure_Sheet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: Pint>=0.8.1 in /srv/app/venv/lib/python3.6/site-packages (from -r requirements.txt (line 2))\n",
      "Requirement already satisfied: numpy>=1.15.0 in /srv/app/venv/lib/python3.6/site-packages (from -r requirements.txt (line 6))\n",
      "Requirement already satisfied: pandas>=0.23.3 in /srv/app/venv/lib/python3.6/site-packages (from -r requirements.txt (line 11))\n",
      "Requirement already satisfied: requests>=2.20.0 in /srv/app/venv/lib/python3.6/site-packages (from -r requirements.txt (line 15))\n",
      "Requirement already satisfied: scipy>=1.1.0 in /srv/app/venv/lib/python3.6/site-packages (from -r requirements.txt (line 18))\n",
      "Requirement already satisfied: pytz>=2017.2 in /srv/app/venv/lib/python3.6/site-packages (from pandas>=0.23.3->-r requirements.txt (line 11))\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /srv/app/venv/lib/python3.6/site-packages (from pandas>=0.23.3->-r requirements.txt (line 11))\n",
      "Requirement already satisfied: urllib3<1.25,>=1.21.1 in /srv/app/venv/lib/python3.6/site-packages (from requests>=2.20.0->-r requirements.txt (line 15))\n",
      "Requirement already satisfied: idna<2.9,>=2.5 in /srv/app/venv/lib/python3.6/site-packages (from requests>=2.20.0->-r requirements.txt (line 15))\n",
      "Requirement already satisfied: chardet<3.1.0,>=3.0.2 in /srv/app/venv/lib/python3.6/site-packages (from requests>=2.20.0->-r requirements.txt (line 15))\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /srv/app/venv/lib/python3.6/site-packages (from requests>=2.20.0->-r requirements.txt (line 15))\n",
      "Requirement already satisfied: six>=1.5 in /srv/app/venv/lib/python3.6/site-packages (from python-dateutil>=2.6.1->pandas>=0.23.3->-r requirements.txt (line 11))\n",
      "\u001b[33mYou are using pip version 9.0.3, however version 20.1 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n",
      "Collecting xlrd\n",
      "\u001b[33m  Cache entry deserialization failed, entry ignored\u001b[0m\n",
      "\u001b[33m  Cache entry deserialization failed, entry ignored\u001b[0m\n",
      "  Downloading https://files.pythonhosted.org/packages/b0/16/63576a1a001752e34bf8ea62e367997530dc553b689356b9879339cf45a4/xlrd-1.2.0-py2.py3-none-any.whl (103kB)\n",
      "\u001b[K    100% |████████████████████████████████| 112kB 1.5MB/s ta 0:00:01\n",
      "\u001b[?25hInstalling collected packages: xlrd\n",
      "Successfully installed xlrd-1.2.0\n",
      "\u001b[33mYou are using pip version 9.0.3, however version 20.1 is available.\n",
      "You should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'HH_and_Expenditure_Sheet' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-8-6e89259e2969>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m FDC_CODE_Sheet = {'Sheet1':'1ba_tkVYPWSAZuD1UZfj8ejO56MbOWluSNWXQnjiS-ME',\n\u001b[1;32m      9\u001b[0m         }\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mSheets\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mHH_and_Expenditure_Sheet\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;31m# API key for Gov\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'HH_and_Expenditure_Sheet' is not defined"
     ]
    }
   ],
   "source": [
    "!pip install -r requirements.txt\n",
    "!pip install xlrd\n",
    "import pandas as pd\n",
    "import fooddatacentral as fdc\n",
    "\n",
    "user = \"xhlee1998@berkeley.edu\"\n",
    "\n",
    "FDC_CODE_Sheet = {'Sheet1':'1ba_tkVYPWSAZuD1UZfj8ejO56MbOWluSNWXQnjiS-ME',\n",
    "        }\n",
    "Sheets = HH_and_Expenditure_Sheet\n",
    "\n",
    "# API key for Gov\n",
    "apikey = {'xhlee1998@berkeley.edu':\"8jdjjjb8SkbmAxTKjdHn9haBM0XtzYxCbg3ODKa4\"}\n",
    "\n",
    "codes=pd.read_excel('fdc.xlsx',sheet_name=\"Sheet1\")\n",
    "def nutrient_per_food(i):\n",
    "    food = codes.iloc[:,i][0]\n",
    "    m = fdc.search(apikey[user],codes.iloc[:,i][0])\n",
    "    code = m.loc[0,'fdcId']\n",
    "    temp = fdc.nutrients(apikey[user],fdc_id=code)\n",
    "    temp = temp.drop(columns=['Units'])\n",
    "    temp.columns = [food]\n",
    "    return temp\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "merged = nutrient_per_food(0)\n",
    "for i in np.arange(1,98):\n",
    "    new = nutrient_per_food(i)\n",
    "    merged = merged.merge(new,left_index=True,right_index=True,how='outer')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['10:0', '12:0', '14:0', '14:1', '15:0', '15:1', '16:0', '16:1',\n",
       "       '16:1 c', '16:1 t', '17:0', '17:1', '18:0', '18:1', '18:1 c',\n",
       "       '18:1 t', '18:2', '18:2 CLAs', '18:2 n-6 c,c',\n",
       "       '18:2 t not further defined', '18:3', '18:3 n-3 c,c,c (ALA)',\n",
       "       '18:3 n-6 c,c,c', '18:3i', '18:4', '20:0', '20:1', '20:2 n-6 c,c',\n",
       "       '20:3', '20:3 n-3', '20:3 n-6', '20:4', '20:5 n-3 (EPA)', '22:0',\n",
       "       '22:1', '22:1 c', '22:1 t', '22:4', '22:5 n-3 (DPA)',\n",
       "       '22:6 n-3 (DHA)', '24:0', '24:1 c', '4:0', '6:0', '8:0', 'Alanine',\n",
       "       'Alcohol, ethyl', 'Amino acids', 'Arginine', 'Ash',\n",
       "       'Aspartic acid', 'Beta-sitosterol', 'Betaine', 'Caffeine',\n",
       "       'Calcium, Ca', 'Campesterol', 'Carbohydrate, by difference',\n",
       "       'Carbohydrates', 'Carotene, alpha', 'Carotene, beta',\n",
       "       'Cholesterol', 'Choline, total', 'Copper, Cu',\n",
       "       'Cryptoxanthin, beta', 'Cysteine', 'Cystine', 'Energy',\n",
       "       'Fatty acids, total monounsaturated',\n",
       "       'Fatty acids, total polyunsaturated',\n",
       "       'Fatty acids, total saturated', 'Fatty acids, total trans',\n",
       "       'Fatty acids, total trans-monoenoic',\n",
       "       'Fatty acids, total trans-polyenoic', 'Fiber, total dietary',\n",
       "       'Folate, DFE', 'Folate, food', 'Folate, total', 'Folic acid',\n",
       "       'Fructose', 'Galactose', 'Glucose (dextrose)', 'Glutamic acid',\n",
       "       'Glycine', 'Histidine', 'Hydroxyproline', 'Iron, Fe', 'Isoleucine',\n",
       "       'Lactose', 'Leucine', 'Lipids', 'Lutein + zeaxanthin', 'Lycopene',\n",
       "       'Lysine', 'Magnesium, Mg', 'Maltose', 'Manganese, Mn',\n",
       "       'Methionine', 'Minerals', 'Niacin', 'Nitrogen', 'Pantothenic acid',\n",
       "       'Phenylalanine', 'Phosphorus, P', 'Phytosterols', 'Potassium, K',\n",
       "       'Proline', 'Protein', 'Proximates', 'Retinol', 'Riboflavin',\n",
       "       'Selenium, Se', 'Serine', 'Sodium, Na', 'Starch', 'Stigmasterol',\n",
       "       'Sucrose', 'Sugars, added', 'Sugars, total including NLEA',\n",
       "       'Theobromine', 'Thiamin', 'Threonine', 'Tocopherol, beta',\n",
       "       'Tocopherol, delta', 'Tocopherol, gamma', 'Tocotrienol, alpha',\n",
       "       'Tocotrienol, beta', 'Tocotrienol, delta', 'Tocotrienol, gamma',\n",
       "       'Total lipid (fat)', 'Tryptophan', 'Tyrosine', 'Valine',\n",
       "       'Vitamin A, IU', 'Vitamin A, RAE', 'Vitamin B-12',\n",
       "       'Vitamin B-12, added', 'Vitamin B-6',\n",
       "       'Vitamin C, total ascorbic acid', 'Vitamin D (D2 + D3)',\n",
       "       'Vitamin D (D2 + D3), International Units',\n",
       "       'Vitamin D2 (ergocalciferol)', 'Vitamin D3 (cholecalciferol)',\n",
       "       'Vitamin E (alpha-tocopherol)', 'Vitamin E, added',\n",
       "       'Vitamin K (Dihydrophylloquinone)', 'Vitamin K (Menaquinone-4)',\n",
       "       'Vitamin K (phylloquinone)', 'Vitamins and Other Components',\n",
       "       'Water', 'Zinc, Zn'], dtype=object)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fct=merged.T.fillna(0)\n",
    "fct.columns.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need the index of the Food Conversion Table (FCT) to match up with\n",
    "the index of the vector of quantities demanded.   To manage this we\n",
    "make use of the `align` method for `pd.DataFrames`:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Sugar', 'Goat', 'Tea'], dtype='object', name='i')\n"
     ]
    }
   ],
   "source": [
    "# Create a new FCT and vector of consumption that only share rows in common:\n",
    "fct0,c0 = fct.align(c,axis=0,join='inner')\n",
    "print(fct0.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, since rows of `fct0` and `c0` match, we can obtain nutritional\n",
    "outcomes from the inner (or dot, or matrix) product of the transposed\n",
    "`fct0` and `c0`:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Protein          1.199523e+04\n",
       "Fat              1.035084e+05\n",
       "fibre            0.000000e+00\n",
       "carbohydrate     5.489719e+05\n",
       "Calories         2.286765e+06\n",
       "energy_kj        9.574230e+06\n",
       "Calcium          6.922335e+05\n",
       "Iron             2.995185e+04\n",
       "Betacarotene     0.000000e+00\n",
       "caroten_total    1.196004e+05\n",
       "Thiamine         2.589053e+02\n",
       "Riboflavin       6.488324e+01\n",
       "Niacin           1.384585e+02\n",
       "Ascorbic Acid    0.000000e+00\n",
       "pu_cal           2.574592e+06\n",
       "pu_prot          6.784459e+02\n",
       "pu_fat           5.317132e+00\n",
       "dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The @ operator means matrix multiply\n",
    "N = fct0.T@c0\n",
    "N"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course, since we can compute the nutritional content of a vector of\n",
    "consumption goods `c0`, we can also use our demand functions to\n",
    "compute nutrition as a *function* of prices and budget.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nutrient_demand(x,pscale=None,p=p):\n",
    "    c = (r.demands(x,p=pscale)/p).dropna()\n",
    "    fct0,c0 = fct.align(c,axis=0,join='inner')\n",
    "    N = fct0.T@c0\n",
    "\n",
    "    return N"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this `nutrient_demand` function in hand, we can see how nutrient\n",
    "outcomes vary with budget, given prices:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'log nutrient')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "X = np.linspace(medianx/5,medianx*5,50).tolist()\n",
    "\n",
    "UseNutrients = ['Protein','Calories','Iron','Calcium']\n",
    "\n",
    "# Use reference prices\n",
    "logN={}\n",
    "for myx in X:\n",
    "    logN[myx] = np.log(nutrient_demand(myx)[UseNutrients])\n",
    "    \n",
    "logN = pd.concat(logN,axis=1).T\n",
    "\n",
    "plt.plot(X,logN)\n",
    "plt.legend(UseNutrients)\n",
    "plt.xlabel('log budget')\n",
    "plt.ylabel('log nutrient')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now how does nutrition vary with prices at median income?\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'log Nutrient')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Choose some good from your dataset\n",
    "USE_GOOD = 'Wild game meat'\n",
    "\n",
    "P = np.linspace(1,5,20).tolist()\n",
    "\n",
    "plt.plot(pd.concat({p0:np.log(nutrient_demand(medianx,pscale={USE_GOOD:p0})[UseNutrients]) for p0 in P},axis=1).T,P)\n",
    "plt.legend(UseNutrients)\n",
    "plt.ylabel('Price')\n",
    "plt.xlabel('log Nutrient')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nutritional Adequacy\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nutritional requirements\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Individuals have nutritional requirements established by nutrition\n",
    " scientists.  Here are some standards established by the Indian\n",
    " National Institute of Nutrition:\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Recommended Daily Allowances: India (Individuals)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Sex-Age|Calories|Protein|Fat|Calcium|Iron|Betacarotene|Thiamine|Riboflavin|Niacin|Ascorbic Acid|\n",
    "|---|---|---|---|---|---|---|---|---|---|---|\n",
    "| C 0-0.5||||500|||.2|.3||25|\n",
    "| C 0.5-1|||19|500|5|2800|.3|.4||25|\n",
    "| C 1-3|1060|16.7|27|600|9|3200|.5|.6|8|40|\n",
    "| C 4-6|1350|20.1|25|600|13|3200|.7|.8|11|40|\n",
    "| C 7-9|1690|29.5|30|600|16|4800|.8|1.|13|40|\n",
    "| B 10-12|2190|39.9|35|800|21|4800|1.1|1.3|15|40|\n",
    "| G 10-12|2010|40.4|35|800|27|4800|1.|1.2|13|40|\n",
    "| B 13-15|2750|54.3|45|800|32|4800|1.4|1.6|16|40|\n",
    "| G 13-15|2330|51.9|40|800|27|4800|1.2|1.4|14|40|\n",
    "| B 16-17|3020|61.5|50|800|28|4800|1.5|1.8|17|40|\n",
    "| G 16-17|2440|55.5|35|800|26|4800|1.|1.2|14|40|\n",
    "| M|2730|60|30|600|17|4800|1.4|1.4|18|40|\n",
    "| W|2230|55|25|1200|21|4800|1.1|1.3|14|40|\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nutritional Needs of Households\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Our data on demand and nutrients is at the *household* level; we\n",
    "   can&rsquo;t directly compare household level nutrition with individual\n",
    "   level requirements.  What we **can** do is add up minimum individual\n",
    "   requirements, and see whether household total exceed these.  This\n",
    "   isn&rsquo;t a guarantee that all individuals have adequate nutrition\n",
    "   (since the way food is allocated in the household might be quite\n",
    "   unequal, or unrelated to individual requirements), but it is\n",
    "   *necessary* if all individuals are to have adequate nutrition.\n",
    "\n",
    "For the average household in the ICRISAT villages, the number of\n",
    "different kinds of people can be computed by averaging over households:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "k\n",
       "M 0-3      0.373398\n",
       "M 4-8      0.503966\n",
       "M 9-13     0.390482\n",
       "M 14-18    0.343299\n",
       "M 19-30    0.453122\n",
       "M 31-50    0.453935\n",
       "M 51+      0.340858\n",
       "F 0-3      0.339231\n",
       "F 4-8      0.472646\n",
       "F 9-13     0.351027\n",
       "F 14-18    0.283913\n",
       "F 19-30    0.594875\n",
       "F 31-50    0.567012\n",
       "Name: z, dtype: float64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# In first round, averaged over households and villages\n",
    "\n",
    "zbar = r.z.sel(t=r.firstround,drop=True).mean(['j','m'])[:-1].squeeze() # Leave out log HSize\n",
    "\n",
    "zbar = zbar.to_dataframe().squeeze()\n",
    "zbar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, the inner/dot/matrix product between `zbar` and the `rda`\n",
    "DataFrame of requirements will give us minimum requirements for the\n",
    "average household:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Calories         14617.923531\n",
       "Protein            299.127557\n",
       "Fat                232.838926\n",
       "Calcium           6051.901566\n",
       "Iron               137.235916\n",
       "Betacarotene     33236.200936\n",
       "Thiamine             7.603437\n",
       "Riboflavin           8.776103\n",
       "Niacin              97.567623\n",
       "Ascorbic Acid      318.495017\n",
       "dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rda = pd.read_pickle('indian_rda.df').T\n",
    "\n",
    "# May need to tweak types to match RDA and zbar types:\n",
    "zbar['C 0-3'] = zbar['M 0-3'] + zbar['F 0-3']\n",
    "zbar['C 4-8'] = zbar['M 4-8'] + zbar['F 4-8']\n",
    "zbar['M'] = zbar['M 19-30'] + zbar['M 31-50'] + zbar['M 51+']\n",
    "zbar['F'] = zbar['F 19-30'] + zbar['F 31-50'] \n",
    "zbar = zbar[['C 0-3','C 4-8','M 9-13','F 9-13','M 14-18','F 14-18','M','F']]\n",
    "\n",
    "rda = rda.replace('',0)\n",
    "\n",
    "rda['C 0-3'] = rda['C 0-0.5'] + rda['C 0.5-1'] + rda['C 1-3']\n",
    "rda['C 4-8'] = rda['C 4-6'] + rda['C 7-9']\n",
    "rda['M 9-13'] = rda['B 10-12']\n",
    "rda['F 9-13'] = rda['G 10-12']\n",
    "rda['M 14-18'] = rda['B 13-15'] + rda['B 16-17']\n",
    "rda['F 14-18'] = rda['G 13-15'] + rda['G 16-17']\n",
    "rda['F'] = rda['W']\n",
    "\n",
    "rda = rda[['C 0-3','C 4-8','M 9-13','F 9-13','M 14-18','F 14-18','M','F']]\n",
    "\n",
    "# This matrix product gives minimum nutrient requirements for average\n",
    "# household in 1975\n",
    "hh_rda = rda@zbar\n",
    "hh_rda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nutritional Adequacy of Food Demands\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we can trace out demands for nutrients as a function of $(x,p)$,\n",
    "and we&rsquo;ve computed minimum nutritional requirements for the average\n",
    "household, we can *normalize* nutritional intake to check the adequacy\n",
    "of diet.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def nutrient_adequacy_ratio(x,pscale=None):\n",
    "    return nutrient_demand(x,pscale=pscale)/hh_rda"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In terms of normalized nutrients, any household with more than one\n",
    "unit of any given nutrient (or zero in logs) will be consuming a\n",
    "minimally adequate level of the nutrient; below this level there&rsquo;s\n",
    "clearly nutritional inadequacy.  For this reason the ratio of\n",
    "actual nutrients to required nutrients is termed the &ldquo;nutrient\n",
    "adequacy ratio,&rdquo; or NAR.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/srv/app/venv/lib/python3.6/site-packages/pandas/core/series.py:679: RuntimeWarning: divide by zero encountered in log\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.lines.Line2D at 0x7f63bc00b588>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(X,pd.concat({x:np.log(nutrient_adequacy_ratio(x,p))[UseNutrients] for x in X},axis=1).T)\n",
    "plt.legend(UseNutrients)\n",
    "plt.xlabel('log budget')\n",
    "plt.ylabel('log nutrient adequacy ratio')\n",
    "plt.axhline(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "org": null
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
